#!/usr/bin/env bash

# Productivity: Production, Products, and Productivity.

typeset __PRDVTY_PATH="$(realpath "$BASH_SOURCE")"
typeset __PRDVTY_ROOT="${__PRDVTY_PATH%/*}"


# -----------------------------------------------------------------------------
# Environment checks and minor change
# -----------------------------------------------------------------------------

# Shell is non-interactive. Be done now
[[ $- =~ i ]] || return

# Minimal bash version (4.2 mostly for "typeset -n")
if [[ "${BASH_VERSINFO[0]:-}${BASH_VERSINFO[1]:-0}" -lt 42 ]]; then
	echo >&2 "This requires bash >= 4.2 to run."
	return 1 2>/dev/null
	exit 1
fi

if [ -z "$HOME" ] || ! [ -d "$HOME" ]; then
	echo "HOME is not defined or not a real folder. Please set it to a valid value"
	return
fi

# If no debug override has been done yet
if [[ -z "${PS4:-}" ]] || [[ "$PS4" == "+ " ]]; then
	PS4=' (${BASH_SOURCE##*/}:$LINENO ${FUNCNAME[0]:-main})  '
	# Add a dark shadow to debug prefix, but keep space as first char
	PS4=" \033[2m${PS4# }\033[0m"
fi



# -----------------------------------------------------------------------------
# Helper subs
# -----------------------------------------------------------------------------

function logInfo {
	echo >&2 "[$(date "+%H:%M:%S")] $@"
}

# -----------------------------------------------------------------------------
# Environement
# -----------------------------------------------------------------------------

function prdvty::envPathBinAdd {
	prdvty::envPathAdd "PATH" $@
}

function prdvty::envPathManAdd {
	prdvty::envPathAdd "MANPATH" $@
}

function prdvty::envPathLibAdd {
	prdvty::envPathAdd "LD_LIBRARY_PATH" $@
}


function prdvty::envPathAdd {
	typeset var="$1"; shift
	typeset where="$1"
	if [ "$where" = "before" ] || [ "$where" = "after" ]; then
		shift
	fi

	for newpath in "$@"; do
		typeset OIFS="$IFS"
		IFS=":"
		for p in $PATH; do
			[ "$newpath" = "$p" ] && {
				IFS="$OIFS"
				continue 2
			}
		done
		IFS="$OIFS"
		# Where to add the path
		if [ "$where" = "before" ]; then
			eval export $var="$newpath:\$$var"
		else
			eval export $var="\$$var:$newpath"
		fi
	done

}

# -----------------------------------------------------------------------------
# Prompt
# -----------------------------------------------------------------------------

# Only show at startup
#if [[ -z "$PRDVTY_LOADTIME" ]] && [[ -n "$PROMPT_COMMAND" ]]; then
#	echo >&2 "Warning: \$PROMPT_COMMAND is already set: '$PROMPT_COMMAND'"
#fi

typeset -i PRDVTY_LOADTIME="$(date +%s)"
typeset -a PRDVTY_PREEXECCB=() PRDVTY_POSTEXECCB=()


function prdvty::shellPostExecRegister {
	PRDVTY_POSTEXECCB+=("$*")
}

function prdvty::shellPreExecRegister {
	PRDVTY_PREEXECCB+=("$*")
}

# preexec is called by bash "trap DEBUG". called before executing a cmd
function prdvty::shellPreExec {
	# Skip our own PROMPT_COMMAND and disable extdebug after a non-zero callback
	if [ "${BASH_COMMAND%% *}" == "prdvty::shellPostExec" ]; then
		shopt -u extdebug
		return
	fi

	# Call out pre-exec callbacks
	typeset cb
	for cb in ${PRDVTY_PREEXECCB[@]}; do
		[ -n "$cb" ] || continue
		# extdebug is needed to prevent the execution of a command.
		# It'll be disabled after a successful callback, or after calling the shellPostExec command
		shopt -s extdebug
		$cb || return 1
		shopt -u extdebug
	done
}

# PostExec is called by promptfunc, itself called by the shell PROMPT_COMMAND
function prdvty::shellPostExec {
	typeset retcode=${1:-$?}

	# Call our post-exec callbacks
	typeset cb
	for cb in ${PRDVTY_POSTEXECCB[@]}; do
		[ -n "$cb" ] || continue
		$cb "$retcode"
	done
}

# -----------------------------------------------------------------------------
# Main processing
# -----------------------------------------------------------------------------

# Load main library data
typeset f="" libdir=""
for libdir in "local/lib.pre" "prdvty" "local/lib.post"; do
	for f in "$__PRDVTY_ROOT/lib/${libdir}/"*.lib; do
		[[ -s "$f" ]] && source "$f"
	done
done

# Load modules
typeset moddir="" modfile=""
for moddir in "$__PRDVTY_ROOT/modules/"*; do
	[[ -d "$moddir" ]] || continue

	for modfile in "$moddir/lib/"*; do
		[[ -s "$modfile" ]] && source "$modfile"
	done
done

# At the end, replace the PROMPT_COMMAND by ours
PROMPT_COMMAND='prdvty::shellPostExec $?'
trap 'prdvty::shellPreExec' DEBUG

# vim: ft=sh
